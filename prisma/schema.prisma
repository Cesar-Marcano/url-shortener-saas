generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum AccountStatus {
  ENABLED
  DISABLED
}

model Currency {
  id               Int                @id @default(autoincrement())
  code             String             @unique
  name             String
  symbol           String
  SubscriptionTier SubscriptionTier[]
}

model SubscriptionTier {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  description         String?
  maxClickPerHour     Int                   @default(10)
  canCustomizeSlugs   Boolean               @default(false)
  advancedAnalytics   Boolean               @default(false)
  linkExpiration      Boolean               @default(false)
  price               Float                 @default(0)
  currencyId          Int
  currency            Currency              @relation(fields: [currencyId], references: [id])
  enabled             Boolean               @default(true)
  public              Boolean               @default(true)
  createdAt           DateTime              @default(now())
  User                User[]
  SubscriptionHistory SubscriptionHistory[]

  @@index([id])
  @@index([name])
}

model PaymentMode {
  id   Int    @id @default(autoincrement())
  code String @default("MONTHLY")
  User User[]
}

model Session {
  id           Int     @id @default(autoincrement())
  sessionUUID  String  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deviceUUID   String
  userAgent    String?
  userIpAdress String?
  user         User    @relation(fields: [userId], references: [id])
  userId       Int
}

model User {
  id                   Int           @id @default(autoincrement())
  email                String        @unique
  password             String
  username             String?       @unique
  name                 String?
  bio                  String?
  profilePic           String?
  emailVerified        Boolean       @default(false)
  twoFactorAuthEnabled Boolean       @default(true)
  role                 UserRole      @default(USER)
  accountStatus        AccountStatus @default(ENABLED)
  disabledUntil        DateTime?
  paymentMode          PaymentMode   @relation(fields: [paymentModeId], references: [id])
  createdAt            DateTime      @default(now())

  ShortenedUrl        ShortenedUrl[]        @relation("UserShortenedUrls")
  tierId              Int
  tier                SubscriptionTier      @relation(fields: [tierId], references: [id])
  ClickHistory        ClickHistory[]
  SubscriptionHistory SubscriptionHistory[]
  paymentModeId       Int
  Session             Session[]

  @@index([email])
  @@index([username])
  @@index([name])
}

model ShortenedUrl {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  originalUrl String
  enabled     Boolean   @default(true)
  archived    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?

  author       User           @relation("UserShortenedUrls", fields: [userId], references: [id])
  userId       Int
  ClickHistory ClickHistory[]

  @@index([slug])
  @@index([slug, originalUrl])
  @@index([originalUrl])
  @@index([enabled])
  @@index([archived])
  @@index([enabled, archived])
  @@index([expiresAt])
}

model ClickHistory {
  id             Int          @id @default(autoincrement())
  userId         Int
  shortenedUrlId Int
  clickedAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  shortenedUrl   ShortenedUrl @relation(fields: [shortenedUrlId], references: [id])

  @@index([shortenedUrlId])
}

model SubscriptionHistory {
  id        Int              @id @default(autoincrement())
  userId    Int
  tierId    Int
  startDate DateTime         @default(now())
  endDate   DateTime?
  tier      SubscriptionTier @relation(fields: [tierId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([userId, tierId])
}
